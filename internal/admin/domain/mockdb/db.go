// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amyunfei/glassy-sky/internal/admin/domain/postgresql (interfaces: Repository)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	postgresql "github.com/amyunfei/glassy-sky/internal/admin/domain/postgresql"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountArticle mocks base method.
func (m *MockRepository) CountArticle(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountArticle", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountArticle indicates an expected call of CountArticle.
func (mr *MockRepositoryMockRecorder) CountArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountArticle", reflect.TypeOf((*MockRepository)(nil).CountArticle), arg0, arg1)
}

// CountCategory mocks base method.
func (m *MockRepository) CountCategory(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCategory", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCategory indicates an expected call of CountCategory.
func (mr *MockRepositoryMockRecorder) CountCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCategory", reflect.TypeOf((*MockRepository)(nil).CountCategory), arg0, arg1)
}

// CountLabel mocks base method.
func (m *MockRepository) CountLabel(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLabel", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLabel indicates an expected call of CountLabel.
func (mr *MockRepositoryMockRecorder) CountLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLabel", reflect.TypeOf((*MockRepository)(nil).CountLabel), arg0, arg1)
}

// CountUser mocks base method.
func (m *MockRepository) CountUser(arg0 context.Context, arg1 postgresql.CountUserParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUser indicates an expected call of CountUser.
func (mr *MockRepositoryMockRecorder) CountUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUser", reflect.TypeOf((*MockRepository)(nil).CountUser), arg0, arg1)
}

// CreateArticle mocks base method.
func (m *MockRepository) CreateArticle(arg0 context.Context, arg1 postgresql.CreateArticleParams) (postgresql.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockRepositoryMockRecorder) CreateArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockRepository)(nil).CreateArticle), arg0, arg1)
}

// CreateArticleCategory mocks base method.
func (m *MockRepository) CreateArticleCategory(arg0 context.Context, arg1 postgresql.CreateArticleCategoryParams) (postgresql.ArticlesCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.ArticlesCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticleCategory indicates an expected call of CreateArticleCategory.
func (mr *MockRepositoryMockRecorder) CreateArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleCategory", reflect.TypeOf((*MockRepository)(nil).CreateArticleCategory), arg0, arg1)
}

// CreateArticleLabel mocks base method.
func (m *MockRepository) CreateArticleLabel(arg0 context.Context, arg1 postgresql.CreateArticleLabelParams) (postgresql.ArticlesLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticleLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.ArticlesLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticleLabel indicates an expected call of CreateArticleLabel.
func (mr *MockRepositoryMockRecorder) CreateArticleLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticleLabel", reflect.TypeOf((*MockRepository)(nil).CreateArticleLabel), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockRepository) CreateCategory(arg0 context.Context, arg1 postgresql.CreateCategoryParams) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockRepositoryMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockRepository)(nil).CreateCategory), arg0, arg1)
}

// CreateLabel mocks base method.
func (m *MockRepository) CreateLabel(arg0 context.Context, arg1 postgresql.CreateLabelParams) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockRepositoryMockRecorder) CreateLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockRepository)(nil).CreateLabel), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 context.Context, arg1 postgresql.CreateUserParams) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1)
}

// DeleteArticle mocks base method.
func (m *MockRepository) DeleteArticle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockRepositoryMockRecorder) DeleteArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockRepository)(nil).DeleteArticle), arg0, arg1)
}

// DeleteArticleCategory mocks base method.
func (m *MockRepository) DeleteArticleCategory(arg0 context.Context, arg1 postgresql.DeleteArticleCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleCategory indicates an expected call of DeleteArticleCategory.
func (mr *MockRepositoryMockRecorder) DeleteArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleCategory", reflect.TypeOf((*MockRepository)(nil).DeleteArticleCategory), arg0, arg1)
}

// DeleteArticleLabel mocks base method.
func (m *MockRepository) DeleteArticleLabel(arg0 context.Context, arg1 postgresql.DeleteArticleLabelParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticleLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticleLabel indicates an expected call of DeleteArticleLabel.
func (mr *MockRepositoryMockRecorder) DeleteArticleLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticleLabel", reflect.TypeOf((*MockRepository)(nil).DeleteArticleLabel), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockRepository) DeleteCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockRepositoryMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockRepository)(nil).DeleteCategory), arg0, arg1)
}

// DeleteLabel mocks base method.
func (m *MockRepository) DeleteLabel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockRepositoryMockRecorder) DeleteLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockRepository)(nil).DeleteLabel), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockRepository) ExecTx(arg0 context.Context, arg1 func(postgresql.Querier) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockRepositoryMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockRepository)(nil).ExecTx), arg0, arg1)
}

// GetArticle mocks base method.
func (m *MockRepository) GetArticle(arg0 context.Context, arg1 int64) (postgresql.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockRepositoryMockRecorder) GetArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockRepository)(nil).GetArticle), arg0, arg1)
}

// GetArticleCategory mocks base method.
func (m *MockRepository) GetArticleCategory(arg0 context.Context, arg1 postgresql.GetArticleCategoryParams) (postgresql.ArticlesCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.ArticlesCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleCategory indicates an expected call of GetArticleCategory.
func (mr *MockRepositoryMockRecorder) GetArticleCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleCategory", reflect.TypeOf((*MockRepository)(nil).GetArticleCategory), arg0, arg1)
}

// GetArticleLabel mocks base method.
func (m *MockRepository) GetArticleLabel(arg0 context.Context, arg1 postgresql.GetArticleLabelParams) (postgresql.ArticlesLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.ArticlesLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleLabel indicates an expected call of GetArticleLabel.
func (mr *MockRepositoryMockRecorder) GetArticleLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleLabel", reflect.TypeOf((*MockRepository)(nil).GetArticleLabel), arg0, arg1)
}

// GetArticlesByCategoryID mocks base method.
func (m *MockRepository) GetArticlesByCategoryID(arg0 context.Context, arg1 int64) ([]postgresql.ArticlesCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByCategoryID", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.ArticlesCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByCategoryID indicates an expected call of GetArticlesByCategoryID.
func (mr *MockRepositoryMockRecorder) GetArticlesByCategoryID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByCategoryID", reflect.TypeOf((*MockRepository)(nil).GetArticlesByCategoryID), arg0, arg1)
}

// GetArticlesByLabelID mocks base method.
func (m *MockRepository) GetArticlesByLabelID(arg0 context.Context, arg1 int64) ([]postgresql.ArticlesLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesByLabelID", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.ArticlesLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticlesByLabelID indicates an expected call of GetArticlesByLabelID.
func (mr *MockRepositoryMockRecorder) GetArticlesByLabelID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesByLabelID", reflect.TypeOf((*MockRepository)(nil).GetArticlesByLabelID), arg0, arg1)
}

// GetCategoriesByArticleID mocks base method.
func (m *MockRepository) GetCategoriesByArticleID(arg0 context.Context, arg1 int64) ([]postgresql.ArticlesCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByArticleID", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.ArticlesCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByArticleID indicates an expected call of GetCategoriesByArticleID.
func (mr *MockRepositoryMockRecorder) GetCategoriesByArticleID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByArticleID", reflect.TypeOf((*MockRepository)(nil).GetCategoriesByArticleID), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockRepository) GetCategory(arg0 context.Context, arg1 int64) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockRepositoryMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockRepository)(nil).GetCategory), arg0, arg1)
}

// GetLabel mocks base method.
func (m *MockRepository) GetLabel(arg0 context.Context, arg1 int64) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockRepositoryMockRecorder) GetLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockRepository)(nil).GetLabel), arg0, arg1)
}

// GetLabelsByArticleID mocks base method.
func (m *MockRepository) GetLabelsByArticleID(arg0 context.Context, arg1 int64) ([]postgresql.ArticlesLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsByArticleID", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.ArticlesLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsByArticleID indicates an expected call of GetLabelsByArticleID.
func (mr *MockRepositoryMockRecorder) GetLabelsByArticleID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsByArticleID", reflect.TypeOf((*MockRepository)(nil).GetLabelsByArticleID), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(arg0 context.Context, arg1 int64) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(arg0 context.Context, arg1 string) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockRepository) GetUserByUsername(arg0 context.Context, arg1 string) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockRepositoryMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockRepository)(nil).GetUserByUsername), arg0, arg1)
}

// ListArticle mocks base method.
func (m *MockRepository) ListArticle(arg0 context.Context, arg1 postgresql.ListArticleParams) ([]postgresql.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticle", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticle indicates an expected call of ListArticle.
func (mr *MockRepositoryMockRecorder) ListArticle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticle", reflect.TypeOf((*MockRepository)(nil).ListArticle), arg0, arg1)
}

// ListCategory mocks base method.
func (m *MockRepository) ListCategory(arg0 context.Context, arg1 postgresql.ListCategoryParams) ([]postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockRepositoryMockRecorder) ListCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockRepository)(nil).ListCategory), arg0, arg1)
}

// ListLabel mocks base method.
func (m *MockRepository) ListLabel(arg0 context.Context, arg1 postgresql.ListLabelParams) ([]postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabel", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabel indicates an expected call of ListLabel.
func (mr *MockRepositoryMockRecorder) ListLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabel", reflect.TypeOf((*MockRepository)(nil).ListLabel), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockRepository) ListUser(arg0 context.Context, arg1 postgresql.ListUserParams) ([]postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockRepositoryMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockRepository)(nil).ListUser), arg0, arg1)
}

// TreeCategory mocks base method.
func (m *MockRepository) TreeCategory(arg0 context.Context) ([]postgresql.TreeCategoryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TreeCategory", arg0)
	ret0, _ := ret[0].([]postgresql.TreeCategoryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TreeCategory indicates an expected call of TreeCategory.
func (mr *MockRepositoryMockRecorder) TreeCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TreeCategory", reflect.TypeOf((*MockRepository)(nil).TreeCategory), arg0)
}

// UpdateCategory mocks base method.
func (m *MockRepository) UpdateCategory(arg0 context.Context, arg1 postgresql.UpdateCategoryParams) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockRepositoryMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepository)(nil).UpdateCategory), arg0, arg1)
}

// UpdateLabel mocks base method.
func (m *MockRepository) UpdateLabel(arg0 context.Context, arg1 postgresql.UpdateLabelParams) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockRepositoryMockRecorder) UpdateLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockRepository)(nil).UpdateLabel), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(arg0 context.Context, arg1 postgresql.UpdateUserParams) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), arg0, arg1)
}
