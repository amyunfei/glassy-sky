// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amyunfei/glassy-sky/internal/admin/domain/postgresql (interfaces: Querier)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	postgresql "github.com/amyunfei/glassy-sky/internal/admin/domain/postgresql"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CountCategory mocks base method.
func (m *MockQuerier) CountCategory(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCategory", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCategory indicates an expected call of CountCategory.
func (mr *MockQuerierMockRecorder) CountCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCategory", reflect.TypeOf((*MockQuerier)(nil).CountCategory), arg0, arg1)
}

// CountLabel mocks base method.
func (m *MockQuerier) CountLabel(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLabel", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLabel indicates an expected call of CountLabel.
func (mr *MockQuerierMockRecorder) CountLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLabel", reflect.TypeOf((*MockQuerier)(nil).CountLabel), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockQuerier) CreateCategory(arg0 context.Context, arg1 postgresql.CreateCategoryParams) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockQuerierMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockQuerier)(nil).CreateCategory), arg0, arg1)
}

// CreateLabel mocks base method.
func (m *MockQuerier) CreateLabel(arg0 context.Context, arg1 postgresql.CreateLabelParams) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockQuerierMockRecorder) CreateLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockQuerier)(nil).CreateLabel), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockQuerier) DeleteCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockQuerierMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockQuerier)(nil).DeleteCategory), arg0, arg1)
}

// DeleteLabel mocks base method.
func (m *MockQuerier) DeleteLabel(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockQuerierMockRecorder) DeleteLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockQuerier)(nil).DeleteLabel), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockQuerier) GetCategory(arg0 context.Context, arg1 int64) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockQuerierMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockQuerier)(nil).GetCategory), arg0, arg1)
}

// GetLabel mocks base method.
func (m *MockQuerier) GetLabel(arg0 context.Context, arg1 int64) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockQuerierMockRecorder) GetLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockQuerier)(nil).GetLabel), arg0, arg1)
}

// ListCategory mocks base method.
func (m *MockQuerier) ListCategory(arg0 context.Context, arg1 postgresql.ListCategoryParams) ([]postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockQuerierMockRecorder) ListCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockQuerier)(nil).ListCategory), arg0, arg1)
}

// ListLabel mocks base method.
func (m *MockQuerier) ListLabel(arg0 context.Context, arg1 postgresql.ListLabelParams) ([]postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabel", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLabel indicates an expected call of ListLabel.
func (mr *MockQuerierMockRecorder) ListLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabel", reflect.TypeOf((*MockQuerier)(nil).ListLabel), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockQuerier) UpdateCategory(arg0 context.Context, arg1 postgresql.UpdateCategoryParams) (postgresql.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockQuerierMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockQuerier)(nil).UpdateCategory), arg0, arg1)
}

// UpdateLabel mocks base method.
func (m *MockQuerier) UpdateLabel(arg0 context.Context, arg1 postgresql.UpdateLabelParams) (postgresql.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockQuerierMockRecorder) UpdateLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockQuerier)(nil).UpdateLabel), arg0, arg1)
}
