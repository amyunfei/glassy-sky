// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: label.sql

package postgresql

import (
	"context"
	"database/sql"
)

const countLabel = `-- name: CountLabel :one
SELECT count(*) FROM labels
WHERE ($1::text = '' OR name LIKE '%' || $1 || '%')
`

func (q *Queries) CountLabel(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLabel, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLabel = `-- name: CreateLabel :one
INSERT INTO labels (
  name,
  color
) VALUES (
  $1, $2
) RETURNING id, name, color, created_at, updated_at, deleted_at
`

type CreateLabelParams struct {
	Name  string
	Color int32
}

func (q *Queries) CreateLabel(ctx context.Context, arg CreateLabelParams) (Label, error) {
	row := q.db.QueryRowContext(ctx, createLabel, arg.Name, arg.Color)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteLabel = `-- name: DeleteLabel :exec
DELETE FROM labels
WHERE id = $1
`

func (q *Queries) DeleteLabel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLabel, id)
	return err
}

const getLabel = `-- name: GetLabel :one
SELECT id, name, color, created_at, updated_at, deleted_at FROM labels
WHERE id = $1
`

func (q *Queries) GetLabel(ctx context.Context, id int64) (Label, error) {
	row := q.db.QueryRowContext(ctx, getLabel, id)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listLabel = `-- name: ListLabel :many
SELECT id, name, color, created_at, updated_at, deleted_at FROM labels
WHERE ($3::text = '' OR name LIKE '%' || $3 || '%')
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListLabelParams struct {
	Limit  int32
	Offset int32
	Name   string
}

func (q *Queries) ListLabel(ctx context.Context, arg ListLabelParams) ([]Label, error) {
	rows, err := q.db.QueryContext(ctx, listLabel, arg.Limit, arg.Offset, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Label{}
	for rows.Next() {
		var i Label
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLabel = `-- name: UpdateLabel :one
UPDATE labels SET
name = COALESCE($2, name),
color = COALESCE($3, color)
WHERE id = $1
RETURNING id, name, color, created_at, updated_at, deleted_at
`

type UpdateLabelParams struct {
	ID    int64
	Name  sql.NullString
	Color sql.NullInt32
}

func (q *Queries) UpdateLabel(ctx context.Context, arg UpdateLabelParams) (Label, error) {
	row := q.db.QueryRowContext(ctx, updateLabel, arg.ID, arg.Name, arg.Color)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
