// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: article_label.sql

package postgresql

import (
	"context"
)

const createArticleLabel = `-- name: CreateArticleLabel :one
INSERT INTO articles_labels (
  article_id,
  label_id
) VALUES (
  $1, $2
) RETURNING article_id, label_id
`

type CreateArticleLabelParams struct {
	ArticleID int64
	LabelID   int64
}

func (q *Queries) CreateArticleLabel(ctx context.Context, arg CreateArticleLabelParams) (ArticlesLabel, error) {
	row := q.db.QueryRowContext(ctx, createArticleLabel, arg.ArticleID, arg.LabelID)
	var i ArticlesLabel
	err := row.Scan(&i.ArticleID, &i.LabelID)
	return i, err
}

const deleteArticleLabel = `-- name: DeleteArticleLabel :exec
DELETE FROM articles_labels
WHERE article_id = $1 AND label_id = $2
`

type DeleteArticleLabelParams struct {
	ArticleID int64
	LabelID   int64
}

func (q *Queries) DeleteArticleLabel(ctx context.Context, arg DeleteArticleLabelParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleLabel, arg.ArticleID, arg.LabelID)
	return err
}

const getArticleLabel = `-- name: GetArticleLabel :one
SELECT article_id, label_id FROM articles_labels
WHERE article_id = $1 AND label_id = $2
`

type GetArticleLabelParams struct {
	ArticleID int64
	LabelID   int64
}

func (q *Queries) GetArticleLabel(ctx context.Context, arg GetArticleLabelParams) (ArticlesLabel, error) {
	row := q.db.QueryRowContext(ctx, getArticleLabel, arg.ArticleID, arg.LabelID)
	var i ArticlesLabel
	err := row.Scan(&i.ArticleID, &i.LabelID)
	return i, err
}

const getArticlesByLabelID = `-- name: GetArticlesByLabelID :many
SELECT article_id, label_id FROM articles_labels
WHERE label_id = $1
`

func (q *Queries) GetArticlesByLabelID(ctx context.Context, labelID int64) ([]ArticlesLabel, error) {
	rows, err := q.db.QueryContext(ctx, getArticlesByLabelID, labelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticlesLabel{}
	for rows.Next() {
		var i ArticlesLabel
		if err := rows.Scan(&i.ArticleID, &i.LabelID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLabelsByArticleID = `-- name: GetLabelsByArticleID :many
SELECT article_id, label_id FROM articles_labels
WHERE article_id = $1
`

func (q *Queries) GetLabelsByArticleID(ctx context.Context, articleID int64) ([]ArticlesLabel, error) {
	rows, err := q.db.QueryContext(ctx, getLabelsByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticlesLabel{}
	for rows.Next() {
		var i ArticlesLabel
		if err := rows.Scan(&i.ArticleID, &i.LabelID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
