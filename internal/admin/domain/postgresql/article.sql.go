// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: article.sql

package postgresql

import (
	"context"
)

const countArticle = `-- name: CountArticle :one
SELECT count(*) FROM articles
WHERE ($1::text = '' OR title LIKE '%' || $1 || '%')
`

func (q *Queries) CountArticle(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countArticle, title)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
  title,
  excerpt,
  content,
  user_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, title, excerpt, content, user_id, status, created_at, updated_at, deleted_at
`

type CreateArticleParams struct {
	Title   string
	Excerpt string
	Content string
	UserID  int64
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.Title,
		arg.Excerpt,
		arg.Content,
		arg.UserID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Excerpt,
		&i.Content,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles
WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, excerpt, content, user_id, status, created_at, updated_at, deleted_at FROM articles
WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Excerpt,
		&i.Content,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listArticle = `-- name: ListArticle :many
SELECT id, title, excerpt, content, user_id, status, created_at, updated_at, deleted_at FROM articles
WHERE ($3::text = '' OR title LIKE '%' || $3 || '%')
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArticleParams struct {
	Limit  int32
	Offset int32
	Title  string
}

func (q *Queries) ListArticle(ctx context.Context, arg ListArticleParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticle, arg.Limit, arg.Offset, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Excerpt,
			&i.Content,
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
