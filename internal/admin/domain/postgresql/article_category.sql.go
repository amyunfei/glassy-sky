// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: article_category.sql

package postgresql

import (
	"context"
)

const createArticleCategory = `-- name: CreateArticleCategory :one
INSERT INTO articles_categories (
  article_id,
  category_id
) VALUES (
  $1, $2
) RETURNING article_id, category_id
`

type CreateArticleCategoryParams struct {
	ArticleID  int64
	CategoryID int64
}

func (q *Queries) CreateArticleCategory(ctx context.Context, arg CreateArticleCategoryParams) (ArticlesCategory, error) {
	row := q.db.QueryRowContext(ctx, createArticleCategory, arg.ArticleID, arg.CategoryID)
	var i ArticlesCategory
	err := row.Scan(&i.ArticleID, &i.CategoryID)
	return i, err
}

const deleteArticleCategory = `-- name: DeleteArticleCategory :exec
DELETE FROM articles_categories
WHERE article_id = $1 AND category_id = $2
`

type DeleteArticleCategoryParams struct {
	ArticleID  int64
	CategoryID int64
}

func (q *Queries) DeleteArticleCategory(ctx context.Context, arg DeleteArticleCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteArticleCategory, arg.ArticleID, arg.CategoryID)
	return err
}

const getArticleCategory = `-- name: GetArticleCategory :one
SELECT article_id, category_id FROM articles_categories
WHERE article_id = $1 AND category_id = $2
`

type GetArticleCategoryParams struct {
	ArticleID  int64
	CategoryID int64
}

func (q *Queries) GetArticleCategory(ctx context.Context, arg GetArticleCategoryParams) (ArticlesCategory, error) {
	row := q.db.QueryRowContext(ctx, getArticleCategory, arg.ArticleID, arg.CategoryID)
	var i ArticlesCategory
	err := row.Scan(&i.ArticleID, &i.CategoryID)
	return i, err
}

const getArticlesByCategoryID = `-- name: GetArticlesByCategoryID :many
SELECT article_id, category_id FROM articles_categories
WHERE category_id = $1
`

func (q *Queries) GetArticlesByCategoryID(ctx context.Context, categoryID int64) ([]ArticlesCategory, error) {
	rows, err := q.db.QueryContext(ctx, getArticlesByCategoryID, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticlesCategory{}
	for rows.Next() {
		var i ArticlesCategory
		if err := rows.Scan(&i.ArticleID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByArticleID = `-- name: GetCategoriesByArticleID :many
SELECT article_id, category_id FROM articles_categories
WHERE article_id = $1
`

func (q *Queries) GetCategoriesByArticleID(ctx context.Context, articleID int64) ([]ArticlesCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticlesCategory{}
	for rows.Next() {
		var i ArticlesCategory
		if err := rows.Scan(&i.ArticleID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
